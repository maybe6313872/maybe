1, Object.defineProperty来监听GET SET方法。v3.0 通过代理监听对象的变化。
2, Object.assign() 浅拷贝 深拷贝，JSON.prase(JSON.stringfy(obj))
3, jsbrige 在window对象上挂载jsbrige对象,然后通过对象callback返回原生处理完的数据
4，vue原理 通过监听实例对象data的getset方法，触发更新后，进watch实例的更新队列里面，然后生成
vnode，新旧vnode对比(用diff算法对比)，然后再更新DOM
5，指令 获取指令的属性，然后vnode进行处理，如权限控制
6，性能优化 https://juejin.cn/post/6844903913410314247
7，闭包 函数无法调用其他函数内部的参数，通过闭包来实现
8，stattic和asset 
function f1(){
　　　　var n=999;
　　　　function f2(){
　　　　　　console.log(n); 
　　　　}
　　　　return f2;
　　}
　　var result=f1();
　　result(); // 999
9, rem和vw和vh
10，cookies，sessionStorage和localStorage
11，data用return返回是因为同一组件有可能被多次调用。避免属性污染
12，vue3对比vue2优化点https://www.zhihu.com/question/478538434
一，代码层面的优化
1.1、v-if 和 v-show 区分使用场景
1.2、computed 和 watch 区分使用场景
1.3、v-for 遍历必须为 item 添加 key，且避免同时使用 v-if
1.4、长列表性能优化
1.5、事件的销毁
1.6、图片资源懒加载
1.7、路由懒加载
1.8、第三方插件的按需引入
1.9、优化无限列表性能
1.10、服务端渲染 SSR or 预渲染
二、Webpack 层面的优化
2.1、Webpack 对图片进行压缩
2.2、减少 ES6 转为 ES5 的冗余代码
2.3、提取公共代码
2.4、模板预编译
2.5、提取组件的 CSS
2.6、优化 SourceMap
2.7、构建结果输出分析
2.8、Vue 项目的编译优化
2.9、SplitChunks插件——分包
三、基础的 Web 技术优化
3.1、开启 gzip 压缩
3.2、浏览器缓存
3.3、CDN 的使用
3.4、使用 Chrome Performance 查找性能瓶颈


问题
1，http常见状态码 100 200 202 204 301 404 500 503
2，http缓存
3，http头常见字段
4，在浏览器中输入url地址的过程
1、一次完整的HTTP事务是怎样的一个过程n？
基本流程：

a. 域名解析

b. 发起TCP的3次握手

c. 建立TCP连接后发起http请求

d. 服务器端响应http请求，浏览器得到html代码

e. 浏览器解析html代码，并请求html代码中的资源

f. 浏览器对页面进行渲染呈现给用户

Webpack
1，webpack执行流程
2，webpack你用过哪些loader和plugin，或者常见的loader、plugin 
    https://zhuanlan.zhihu.com/p/28245984
3，loader和plugin的区别 n
4，有没有自己实现plugin
5，webpack热更新的实现-resove有一个配置，CSS有一个配置，vue.config.js

路由懒加载，预渲染，打包仿真器

compression-webpack-plugin 生产环境可采用gzip压缩JS和CSS 需要服务器和浏览器支持

内存泄漏 1，闭包，2，未销毁的事件监听，3，定时器，延时器未销毁

作用域

for(var i=0; i<10;i++){
    setTimeout(function(){
    console.log(i)// 打印10
}, 1000)
}

mock